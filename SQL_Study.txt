
# 원래 SQL은 데이터 조작어 등 commit 명령어로 계속 저장해줘야 한다. 하지만 데이터 정의어 DDL은 auto save 가 된다. 


use test;

# 데이터 정의어
create table alpaco(
student_id int not null primary key,
student_name varchar(20) not null
);

# alpaco 컬럼에 email 컬럼 열 넣기
alter table alpaco add email varchar(30);


# alpaco 테이블에서 email 컬럼 삭제
alter table alpaco drop column email;

# student_name 형식을 varchar(100)으로 변경해라 
alter table alpaco modify student_name varchar(100) not null;

alter table alpaco rename column student_name to s_name;

# 데이터 조작어
insert into alpaco (student_id, s_name)
values(0,'홍길동');

alter table alpaco add email varchar(30);

insert into alpaco (student_id, s_name) # 컬럼 작성 생략 가능하다
values(1,'이순신');

select*
from player;

update player
set position='FW'
where player_id=2000002;


# update 처음에는 실행이 막혀있어서, 이것을 풀어줘야함.
set SQL_SAFE_UPDATES= 0;

update player
set position='FW'
where player_id=2000002;

select*
from player;

#데이터 조작어: 테이블 구조는 유지, 내부 데이터 삭제 - 자동저장 X, 꼭 commit 을 해야한다
delete # 행 삭제
from player
where player_id=2000002;

# 테이블 출력
select*  # 별표 : 확인할 전체 컬럼
from player;

select player_name, height, weight, position # 해당 열만 확인
from player
where weight>75; # 조건을 걸 수 있다. 

select distinct position # distinct : 데이터 프레임에서 unique 같은 역할 - 중복을 제거해서 출력
from player
where weight>75; # 조건을 걸 수 있다. 

# 컬럼 이름 재설정해 출력
select player_name, weight, height, weight/(height*height) as BMI
from player;


select player_name, concat(height,'cm') # height에 'cm'을 붙여서 함꼐 출력되는
from player;

commit;

set AUTOCOMMIT=0;

#Rollback : 각 save 지점을 정하고, 내가 지정한 곳 가는

delete
from player
where player_id=2000001;

savepoint A;

delete
from player
where player_id=2000003;

savepoint B;


select*
from player;

rollback to A;

select*
from player;

# 조건을 달아서 출력
select*
from player
where height between 170 and 190;

select*
from player
where position in ('FW','DF');

select player_name,lower(position), ABS(weight- height) # select절에 사용할 수 있는 함수들을 내장 함수라고 함
from player;

# 내장함수2 - WHEN
select player_name, weight, case
						when height >185
						  then 'high'
						when height > 175
                          then 'mid'
						when height > 160
                          then 'small'
						else 'other'
                        end as '키분류'
                        
from player;

# 테이블에서 빈칸이라고 무조건 null값은 아님 -> 빈 문자열로 채워져 있음


# group_by로 만든 열은 집계함수만 사용 가능

select team_id, count(*),max(height),min(weight),AVG(height) # 그룹별 최고 큰 키, 작은 키, 평균 키
from player
where height >180 # player 테이블에서 키가 180 이상인 사람만 뽑고 - 원 데이터 필터링
group by team_id # team_id로 그룹화
having AVG(height)>180; #group_by 의 조건문은 having으로 작성 - goruping 하고 나서 조건

# 정렬
select player_name,height,weight
from player
order by height asc, weight desc; #asc: 오름차순

/*키가 큰 상위 10명만 출력 */
select player_name, height, weight
from player
order by height desc
limit 10; # 데이터 프레임에서 head() 명령어와 같은 역할

# Join - 조인 : 2개 이상의 테이블을 엮어서 한번에 출력
select *
from player; # 현재 Team_ID만 있음 , 이거를 이름으로 표현하고 싶음

# 선수들마다 팀 아이디와 팀 이름을 같이 출력해보자!
select p.player_name, p.team_id, t.team_name # 어느 테이블의 컬럼인지 명시
from player p, team t # 사용할 테이블 목록 나열
where p.team_id = t.team_id ; # 연결할 기준을 

select p.player_name, t.team_name # 어느 테이블의 컬럼인지 명시
from player p, (select team_id, team_name from team) t; # 쿼리의 결과를 테이블로 쓸 수 있다 

# 서브 쿼리, 쿼리의 결과를 조건으로 사용할 수 있다. 
select*
from player
where team_id in (select team_id
				  from team
				  where team_id in ('K01','K02')); # 쿼리의 결과를 hwere절에서 쓸 수 있따. 







